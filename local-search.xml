<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>1.C++数据类型</title>
    <link href="/2024/04/24/1.C-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2024/04/24/1.C-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1. 数据类型"></a>1. 数据类型</h1><p>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p><h2 id="1-1-整型"><a href="#1-1-整型" class="headerlink" title="1.1 整型"></a>1.1 整型</h2><p><strong>作用</strong>：整型变量表示的是整数类型的数据</p><p>C++中能够表示整型的类型有以下几种方式，区别在于所占内存空间不同：</p><table><thead><tr><th>数据类型</th><th>占用空间</th><th>取值范围</th></tr></thead><tbody><tr><td>short(短整型)</td><td>2字节</td><td>(-2^15 ~ 2^15-1)</td></tr><tr><td>int(整型)</td><td>4字节</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long(长整形)</td><td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long long(长长整形)</td><td>8字节</td><td>(-2^63 ~ 2^63-1)</td></tr></tbody></table><h2 id="1-2-sozeof关键字"><a href="#1-2-sozeof关键字" class="headerlink" title="1.2 sozeof关键字"></a>1.2 sozeof关键字</h2><p><strong>作用</strong>：利用sizeof关键字可以统计数据类型所占内存大小  </p><p><strong>语法</strong>：<code>sizeof( 数据类型 / 变量)</code>  </p><p><strong>示例</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;short 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">short</span>) &lt;&lt; endl;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;int 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>) &lt;&lt; endl;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;long 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">long</span>) &lt;&lt; endl;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;long long 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">long</span> <span class="hljs-type">long</span>) &lt;&lt; endl;<br><br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>整型结论：short &lt; int &lt;&#x3D; long &lt;&#x3D; long long  </p></blockquote><p><strong>问题</strong>：这里遇到了控制台输出中文乱码的问题，原因是控制台输出的字符格式没有被定义为UTF-8 编码<br><strong>解决方法</strong>：设置控制台输出为UTF-8 编码格式，具体操作如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-built_in">SetConsoleOutputCP</span>(CP_UTF8);  <span class="hljs-comment">// 设置控制台输出为 UTF-8 编码</span><br>   cout &lt;&lt; <span class="hljs-string">&quot;你好 &quot;</span>&lt;&lt; endl;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>数据类型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AMC_强化学习_抗干扰</title>
    <link href="/2024/04/24/AMC_%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0_%E6%8A%97%E5%B9%B2%E6%89%B0/"/>
    <url>/2024/04/24/AMC_%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0_%E6%8A%97%E5%B9%B2%E6%89%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="AMC"><a href="#AMC" class="headerlink" title="AMC"></a>AMC</h1><blockquote><p>传统的波形参数决策主要是对调制方式和编码速率的决策,可看作是AMC技术。在传统的AMC技术中,根据信道的状态信息(ChannelStateInformation,CSI),实时地调整调制方式和编码速率最大化系统吞吐量。AMC技术实现主要分为三个步骤:信道状态估计、信噪比估计、MCS切换方案。其中,信道状态估计主要是通过非盲信道、盲信道以及半盲信道估计等方法获取当前信道的估计参数;信噪比估计是将信道的状态信息映射为信噪比(SignalNoiseRatio,SNR)值,目前主要的研究方法有最大似然估计、基于谱估计、基于统计量估计等;MCS切换方案是指根据估计出来的信道状态信息和信噪比值来选择对应的调制方案,目前主要的研究方法有基于固定门限和基于门限调整。</p><blockquote><p>基于强化学习的D2D波形参数决策方法研究_谢霞  </p></blockquote></blockquote><img src="/2024/04/24/AMC_%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0_%E6%8A%97%E5%B9%B2%E6%89%B0/%E8%87%AA%E9%80%82%E5%BA%94%E8%B0%83%E5%88%B6%E7%BC%96%E7%A0%81%E7%B3%BB%E7%BB%9F%E6%A1%86%E5%9B%BE.png" class="" title="自适应调制编码系统框图">]]></content>
    
    
    <categories>
      
      <category>强化学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>强化学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown语法介绍</title>
    <link href="/2024/04/24/Markdown%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D/"/>
    <url>/2024/04/24/Markdown%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><table><thead><tr><th align="center">功能</th><th align="center">快捷键</th></tr></thead><tbody><tr><td align="center">加粗</td><td align="center">Ctrl + B</td></tr><tr><td align="center">斜体</td><td align="center">Ctrl + I</td></tr><tr><td align="center">引用</td><td align="center">Ctrl + Q</td></tr><tr><td align="center">插入链接</td><td align="center">Ctrl + L</td></tr><tr><td align="center">插入代码</td><td align="center">Ctrl + K</td></tr><tr><td align="center">插入图片</td><td align="center">Ctrl + G</td></tr><tr><td align="center">提升标题</td><td align="center">Ctrl + H</td></tr><tr><td align="center">有序列表</td><td align="center">Ctrl + O</td></tr><tr><td align="center">无序列表</td><td align="center">Ctrl + U</td></tr><tr><td align="center">横线</td><td align="center">Ctrl + R</td></tr><tr><td align="center">撤销</td><td align="center">Ctrl + Z</td></tr><tr><td align="center">重做</td><td align="center">Ctrl + Y</td></tr></tbody></table><p>在vscode中无法使用上述的快捷键，设置的快捷键为vscode中自带的。</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="分级标题"><a href="#分级标题" class="headerlink" title="分级标题"></a>分级标题</h2><p>用#表示标题的级别，#后面要加空格</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="插入本地图片"><a href="#插入本地图片" class="headerlink" title="插入本地图片"></a>插入本地图片</h3><h4 id="插入同级目录下的图片"><a href="#插入同级目录下的图片" class="headerlink" title="插入同级目录下的图片"></a>插入同级目录下的图片</h4><pre><code class="hljs">！[图片描述](/pic.jpg)</code></pre><h4 id="插入下一级目录下的图片"><a href="#插入下一级目录下的图片" class="headerlink" title="插入下一级目录下的图片"></a>插入下一级目录下的图片</h4><pre><code class="hljs">！[图片描述](/pics/pic2.jpg)</code></pre><p>图片描述可以不写</p><h3 id="插入互联网上的图片"><a href="#插入互联网上的图片" class="headerlink" title="插入互联网上的图片"></a>插入互联网上的图片</h3><pre><code class="hljs">！[图片描述](https://pic.downcc.com/upload/2015-9/2015923174024.png)</code></pre><h3 id="自动连接"><a href="#自动连接" class="headerlink" title="自动连接"></a>自动连接</h3><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;包起来， Markdown 就会自动把它转成链接。也可以直接写，也是可以显示成链接形式的</p><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>可以在一行中用三个以上的星号(*)、减号(-)、底线(_)来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格</p><hr><p>分隔一</p><hr><p>分隔二</p><hr><p>分隔三</p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>插入程序代码的方式有两种，一种是利用缩进(tab), 另一种是利用英文“&#96;”符号</p><h3 id="代码块-1"><a href="#代码块-1" class="headerlink" title="代码块"></a>代码块</h3><p>缩进 4 个空格或是 1 个制表符。</p><h3 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h3><p>如果在一个行内需要引用代码，只要用反引号&#96;引起来就好</p><h3 id="多行代码块与语法高亮"><a href="#多行代码块与语法高亮" class="headerlink" title="多行代码块与语法高亮"></a>多行代码块与语法高亮</h3><p>在需要高亮的代码块的前一行及后一行使用三个单反引号“&#96;”包裹，就可以了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">i</span> am <span class="hljs-selector-tag">code</span><br></code></pre></td></tr></table></figure><h3 id="代码块里面包含html代码"><a href="#代码块里面包含html代码" class="headerlink" title="代码块里面包含html代码"></a>代码块里面包含html代码</h3><p>在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，剩下的 Markdown 都会帮你处理。</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在被引用的文本前加上&gt;符号，以及一个空格就可以<br>可以用多个&gt;进行嵌套引用</p><blockquote><p>eqhueudq</p><blockquote><p>d1</p><blockquote><p>fwe</p></blockquote></blockquote></blockquote><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>使用 *，+，- 表示无序列表</p><ul><li>列表文字1</li></ul><ul><li>列表文字2</li></ul><ul><li>列表文字3</li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>使用数字和一个英文句点表示有序列表。</p><ol><li>列表文字1</li><li>列表文字2</li><li>列表文字3</li></ol><h3 id="无序列表和有序列表同时使用"><a href="#无序列表和有序列表同时使用" class="headerlink" title="无序列表和有序列表同时使用"></a>无序列表和有序列表同时使用</h3><ul><li><ol><li>列表文字1</li></ol></li></ul><ul><li><ol start="2"><li>列表文字2</li></ol></li></ul><p>在使用列表时，只要是数字后面加上英文的点，就会无意间产生列表，比如2017.12.30 这时候想表达的是日期，有些软件把它被误认为是列表。解决方式：在每个点前面加上\就可以了</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>用-和|创建表格，如快捷键模块</p><h2 id="常用技巧"><a href="#常用技巧" class="headerlink" title="常用技巧"></a>常用技巧</h2><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p>方法1: 连续两个以上空格+回车  </p><p>方法2：使用html语言换行标签：</p><h3 id="缩进字符"><a href="#缩进字符" class="headerlink" title="缩进字符"></a>缩进字符</h3><p>不断行的空白格   或  半角的空格   或  全角的空格   或  <br>&amp;nbsp缩进缩进  </p><p>没看懂</p><h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><p>对于 Markdown 中的语法符号，前面加反斜线\即可显示符号本身。  </p><p>其他特殊字符，示例如下：<br>&#10084;<br>&#10003;<br>&#9728;<br>&#9733;<br>&#9730;<br>&#9742;<br>其他的特殊字符可以在这个网站上查看 <a href="https://unicode-table.com/cn/">https://unicode-table.com/cn/</a></p><h3 id="字体、字号与颜色"><a href="#字体、字号与颜色" class="headerlink" title="字体、字号与颜色"></a>字体、字号与颜色</h3><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过类似HTML的标记语法，它可以使普通文本内容具有一定的格式</p><h3 id="Latex数学公式"><a href="#Latex数学公式" class="headerlink" title="Latex数学公式"></a>Latex数学公式</h3><h4 id="行内公式"><a href="#行内公式" class="headerlink" title="行内公式"></a>行内公式</h4><p>使用两个”$”符号引用公式:<br>$J\begin{pmatrix}t\end{pmatrix}&#x3D;A\exp\begin{pmatrix}j\begin{pmatrix}2\pi f_ct+\varphi\end{pmatrix}\end{pmatrix}$</p><h4 id="行间公式"><a href="#行间公式" class="headerlink" title="行间公式"></a>行间公式</h4><p>使用两对“$$”符号引用公式<br>$$<br>b_k\begin{pmatrix}t\end{pmatrix}&#x3D;\sum_{n&#x3D;0}^\infty b_ng_b\begin{pmatrix}t-nT_b\end{pmatrix}<br>$$</p>]]></content>
    
    
    <categories>
      
      <category>博客相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开始hexo_Fluid博客编写</title>
    <link href="/2024/04/16/%E5%BC%80%E5%A7%8Bhexo-Fluid%E5%8D%9A%E5%AE%A2%E7%BC%96%E5%86%99/"/>
    <url>/2024/04/16/%E5%BC%80%E5%A7%8Bhexo-Fluid%E5%8D%9A%E5%AE%A2%E7%BC%96%E5%86%99/</url>
    
    <content type="html"><![CDATA[<h2 id="开始一个博客"><a href="#开始一个博客" class="headerlink" title="开始一个博客"></a>开始一个博客</h2><p>在本地创建的文件夹中（例如myblog），右键git bash here，打开命令行窗口后即可开始操作。<br>ping不上github所以更改端口为7890（clash默认端口），每次必须要打开clash才能部署文章到github上。</p><h2 id="hexo命令"><a href="#hexo命令" class="headerlink" title="hexo命令"></a>hexo命令</h2><h3 id="新建一篇文章"><a href="#新建一篇文章" class="headerlink" title="新建一篇文章"></a>新建一篇文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;文章标题&quot;</span><br></code></pre></td></tr></table></figure><p>这将会在Hexo博客的 source&#x2F;_posts 目录下创建一个名为 文章标题.md 的Markdown文件。可以使用任何文本编辑器打开这个文件，然后开始编写文章内容。</p><p>每次更改完成之后最好先清除之前生成的内容。</p><h3 id="清除之前生成的内容"><a href="#清除之前生成的内容" class="headerlink" title="清除之前生成的内容"></a>清除之前生成的内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean<br></code></pre></td></tr></table></figure><p>本地预览生成后访问<a href="http://localhost:4000/">http://localhost:4000/</a> 即可查看</p><h3 id="生成本地预览"><a href="#生成本地预览" class="headerlink" title="生成本地预览"></a>生成本地预览</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo s<br></code></pre></td></tr></table></figure><h3 id="生成静态文章"><a href="#生成静态文章" class="headerlink" title="生成静态文章"></a>生成静态文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>部署文章可能会有延迟，以本地预览效果为准</p><h3 id="部署文章"><a href="#部署文章" class="headerlink" title="部署文章"></a>部署文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>博客相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
